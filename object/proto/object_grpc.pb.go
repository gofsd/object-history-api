// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/object/object.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ObjectService_CreateObject_FullMethodName        = "/object.ObjectService/CreateObject"
	ObjectService_GetObject_FullMethodName           = "/object.ObjectService/GetObject"
	ObjectService_UpdateObject_FullMethodName        = "/object.ObjectService/UpdateObject"
	ObjectService_DeleteObject_FullMethodName        = "/object.ObjectService/DeleteObject"
	ObjectService_AddField_FullMethodName            = "/object.ObjectService/AddField"
	ObjectService_RenameField_FullMethodName         = "/object.ObjectService/RenameField"
	ObjectService_DeleteField_FullMethodName         = "/object.ObjectService/DeleteField"
	ObjectService_SetValue_FullMethodName            = "/object.ObjectService/SetValue"
	ObjectService_UpdateValue_FullMethodName         = "/object.ObjectService/UpdateValue"
	ObjectService_DeleteValue_FullMethodName         = "/object.ObjectService/DeleteValue"
	ObjectService_TransactionalUpdate_FullMethodName = "/object.ObjectService/TransactionalUpdate"
)

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type ObjectServiceClient interface {
	// Object management
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	// Field-level operations
	AddField(ctx context.Context, in *AddFieldRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	RenameField(ctx context.Context, in *RenameFieldRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	// Value-level operations
	SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	UpdateValue(ctx context.Context, in *UpdateValueRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	DeleteValue(ctx context.Context, in *DeleteValueRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
	// Transactional update (atomic changes with version bump)
	TransactionalUpdate(ctx context.Context, in *TransactionalUpdateRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_CreateObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_UpdateObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_DeleteObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) AddField(ctx context.Context, in *AddFieldRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_AddField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) RenameField(ctx context.Context, in *RenameFieldRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_RenameField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteField(ctx context.Context, in *DeleteFieldRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_DeleteField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_SetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateValue(ctx context.Context, in *UpdateValueRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_UpdateValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteValue(ctx context.Context, in *DeleteValueRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_DeleteValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) TransactionalUpdate(ctx context.Context, in *TransactionalUpdateRequest, opts ...grpc.CallOption) (*ObjectVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectVersionResponse)
	err := c.cc.Invoke(ctx, ObjectService_TransactionalUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations must embed UnimplementedObjectServiceServer
// for forward compatibility.
//
// Service definition
type ObjectServiceServer interface {
	// Object management
	CreateObject(context.Context, *CreateObjectRequest) (*ObjectVersionResponse, error)
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	UpdateObject(context.Context, *UpdateObjectRequest) (*ObjectVersionResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*ObjectVersionResponse, error)
	// Field-level operations
	AddField(context.Context, *AddFieldRequest) (*ObjectVersionResponse, error)
	RenameField(context.Context, *RenameFieldRequest) (*ObjectVersionResponse, error)
	DeleteField(context.Context, *DeleteFieldRequest) (*ObjectVersionResponse, error)
	// Value-level operations
	SetValue(context.Context, *SetValueRequest) (*ObjectVersionResponse, error)
	UpdateValue(context.Context, *UpdateValueRequest) (*ObjectVersionResponse, error)
	DeleteValue(context.Context, *DeleteValueRequest) (*ObjectVersionResponse, error)
	// Transactional update (atomic changes with version bump)
	TransactionalUpdate(context.Context, *TransactionalUpdateRequest) (*ObjectVersionResponse, error)
	mustEmbedUnimplementedObjectServiceServer()
}

// UnimplementedObjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedObjectServiceServer struct{}

func (UnimplementedObjectServiceServer) CreateObject(context.Context, *CreateObjectRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedObjectServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectServiceServer) UpdateObject(context.Context, *UpdateObjectRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedObjectServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectServiceServer) AddField(context.Context, *AddFieldRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddField not implemented")
}
func (UnimplementedObjectServiceServer) RenameField(context.Context, *RenameFieldRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameField not implemented")
}
func (UnimplementedObjectServiceServer) DeleteField(context.Context, *DeleteFieldRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedObjectServiceServer) SetValue(context.Context, *SetValueRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedObjectServiceServer) UpdateValue(context.Context, *UpdateValueRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValue not implemented")
}
func (UnimplementedObjectServiceServer) DeleteValue(context.Context, *DeleteValueRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValue not implemented")
}
func (UnimplementedObjectServiceServer) TransactionalUpdate(context.Context, *TransactionalUpdateRequest) (*ObjectVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionalUpdate not implemented")
}
func (UnimplementedObjectServiceServer) mustEmbedUnimplementedObjectServiceServer() {}
func (UnimplementedObjectServiceServer) testEmbeddedByValue()                       {}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedObjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_CreateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_UpdateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_AddField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).AddField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_AddField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).AddField(ctx, req.(*AddFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_RenameField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).RenameField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_RenameField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).RenameField(ctx, req.(*RenameFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_DeleteField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteField(ctx, req.(*DeleteFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_SetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).SetValue(ctx, req.(*SetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_UpdateValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateValue(ctx, req.(*UpdateValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_DeleteValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteValue(ctx, req.(*DeleteValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_TransactionalUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionalUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).TransactionalUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_TransactionalUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).TransactionalUpdate(ctx, req.(*TransactionalUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _ObjectService_CreateObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ObjectService_GetObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _ObjectService_UpdateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectService_DeleteObject_Handler,
		},
		{
			MethodName: "AddField",
			Handler:    _ObjectService_AddField_Handler,
		},
		{
			MethodName: "RenameField",
			Handler:    _ObjectService_RenameField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _ObjectService_DeleteField_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _ObjectService_SetValue_Handler,
		},
		{
			MethodName: "UpdateValue",
			Handler:    _ObjectService_UpdateValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _ObjectService_DeleteValue_Handler,
		},
		{
			MethodName: "TransactionalUpdate",
			Handler:    _ObjectService_TransactionalUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/object/object.proto",
}
