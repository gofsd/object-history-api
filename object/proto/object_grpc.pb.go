// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.33.0
// source: proto/object/object.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObjectService_CreateObject_FullMethodName            = "/object.ObjectService/CreateObject"
	ObjectService_GetObject_FullMethodName               = "/object.ObjectService/GetObject"
	ObjectService_UpdateObject_FullMethodName            = "/object.ObjectService/UpdateObject"
	ObjectService_DeleteObjectField_FullMethodName       = "/object.ObjectService/DeleteObjectField"
	ObjectService_CreateObjects_FullMethodName           = "/object.ObjectService/CreateObjects"
	ObjectService_GetObjects_FullMethodName              = "/object.ObjectService/GetObjects"
	ObjectService_UpdateObjects_FullMethodName           = "/object.ObjectService/UpdateObjects"
	ObjectService_CreateObjectsUnique_FullMethodName     = "/object.ObjectService/CreateObjectsUnique"
	ObjectService_UpdateObjectsUnique_FullMethodName     = "/object.ObjectService/UpdateObjectsUnique"
	ObjectService_ListObjects_FullMethodName             = "/object.ObjectService/ListObjects"
	ObjectService_ExecuteAction_FullMethodName           = "/object.ObjectService/ExecuteAction"
	ObjectService_ExecuteActions_FullMethodName          = "/object.ObjectService/ExecuteActions"
	ObjectService_TransferObjects_FullMethodName         = "/object.ObjectService/TransferObjects"
	ObjectService_ReceiveObjects_FullMethodName          = "/object.ObjectService/ReceiveObjects"
	ObjectService_SubscribeToUsersObjects_FullMethodName = "/object.ObjectService/SubscribeToUsersObjects"
	ObjectService_SubscribeToMyself_FullMethodName       = "/object.ObjectService/SubscribeToMyself"
	ObjectService_SyncWithUsers_FullMethodName           = "/object.ObjectService/SyncWithUsers"
	ObjectService_Sync_FullMethodName                    = "/object.ObjectService/Sync"
	ObjectService_GetObjectCommands_FullMethodName       = "/object.ObjectService/GetObjectCommands"
)

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	// CRUD
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	DeleteObjectField(ctx context.Context, in *DeleteObjectsFieldsRequest, opts ...grpc.CallOption) (*ObjectResponse, error)
	// Batch/Unique
	CreateObjects(ctx context.Context, in *CreateObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	UpdateObjects(ctx context.Context, in *UpdateObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	CreateObjectsUnique(ctx context.Context, in *CreateObjectsUniqueRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	UpdateObjectsUnique(ctx context.Context, in *UpdateObjectsUniqueRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
	// List & Pagination
	ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	// Action/Transfer
	ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error)
	ExecuteActions(ctx context.Context, in *ExecuteActionsRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error)
	TransferObjects(ctx context.Context, in *TransferObjectsRequest, opts ...grpc.CallOption) (*TransferObjectsResponse, error)
	ReceiveObjects(ctx context.Context, in *TransferObjectsResponse, opts ...grpc.CallOption) (*ReceiveObjectsResponse, error)
	// Streaming/Subscription
	SubscribeToUsersObjects(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ObjectService_SubscribeToUsersObjectsClient, error)
	SubscribeToMyself(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ObjectService_SubscribeToMyselfClient, error)
	SyncWithUsers(ctx context.Context, in *DiffByUsers, opts ...grpc.CallOption) (ObjectService_SyncWithUsersClient, error)
	Sync(ctx context.Context, opts ...grpc.CallOption) (ObjectService_SyncClient, error)
	// Get object commands
	GetObjectCommands(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*ObjectsResponse, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_CreateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_UpdateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteObjectField(ctx context.Context, in *DeleteObjectsFieldsRequest, opts ...grpc.CallOption) (*ObjectResponse, error) {
	out := new(ObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_DeleteObjectField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CreateObjects(ctx context.Context, in *CreateObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_CreateObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateObjects(ctx context.Context, in *UpdateObjectsRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_UpdateObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CreateObjectsUnique(ctx context.Context, in *CreateObjectsUniqueRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_CreateObjectsUnique_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateObjectsUnique(ctx context.Context, in *UpdateObjectsUniqueRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_UpdateObjectsUnique_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) ListObjects(ctx context.Context, in *ListObjectsRequest, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_ListObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) ExecuteAction(ctx context.Context, in *ExecuteActionRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error) {
	out := new(ExecuteActionResponse)
	err := c.cc.Invoke(ctx, ObjectService_ExecuteAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) ExecuteActions(ctx context.Context, in *ExecuteActionsRequest, opts ...grpc.CallOption) (*ExecuteActionResponse, error) {
	out := new(ExecuteActionResponse)
	err := c.cc.Invoke(ctx, ObjectService_ExecuteActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) TransferObjects(ctx context.Context, in *TransferObjectsRequest, opts ...grpc.CallOption) (*TransferObjectsResponse, error) {
	out := new(TransferObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_TransferObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) ReceiveObjects(ctx context.Context, in *TransferObjectsResponse, opts ...grpc.CallOption) (*ReceiveObjectsResponse, error) {
	out := new(ReceiveObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_ReceiveObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) SubscribeToUsersObjects(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ObjectService_SubscribeToUsersObjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[0], ObjectService_SubscribeToUsersObjects_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceSubscribeToUsersObjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_SubscribeToUsersObjectsClient interface {
	Recv() (*SubscriptionResponse, error)
	grpc.ClientStream
}

type objectServiceSubscribeToUsersObjectsClient struct {
	grpc.ClientStream
}

func (x *objectServiceSubscribeToUsersObjectsClient) Recv() (*SubscriptionResponse, error) {
	m := new(SubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) SubscribeToMyself(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ObjectService_SubscribeToMyselfClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[1], ObjectService_SubscribeToMyself_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceSubscribeToMyselfClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_SubscribeToMyselfClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type objectServiceSubscribeToMyselfClient struct {
	grpc.ClientStream
}

func (x *objectServiceSubscribeToMyselfClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) SyncWithUsers(ctx context.Context, in *DiffByUsers, opts ...grpc.CallOption) (ObjectService_SyncWithUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[2], ObjectService_SyncWithUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceSyncWithUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_SyncWithUsersClient interface {
	Recv() (*ObjectActions, error)
	grpc.ClientStream
}

type objectServiceSyncWithUsersClient struct {
	grpc.ClientStream
}

func (x *objectServiceSyncWithUsersClient) Recv() (*ObjectActions, error) {
	m := new(ObjectActions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) Sync(ctx context.Context, opts ...grpc.CallOption) (ObjectService_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[3], ObjectService_Sync_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceSyncClient{stream}
	return x, nil
}

type ObjectService_SyncClient interface {
	Send(*ObjectActions) error
	Recv() (*ObjectActions, error)
	grpc.ClientStream
}

type objectServiceSyncClient struct {
	grpc.ClientStream
}

func (x *objectServiceSyncClient) Send(m *ObjectActions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectServiceSyncClient) Recv() (*ObjectActions, error) {
	m := new(ObjectActions)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) GetObjectCommands(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*ObjectsResponse, error) {
	out := new(ObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetObjectCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations must embed UnimplementedObjectServiceServer
// for forward compatibility
type ObjectServiceServer interface {
	// CRUD
	CreateObject(context.Context, *CreateObjectRequest) (*ObjectResponse, error)
	GetObject(context.Context, *GetObjectRequest) (*ObjectResponse, error)
	UpdateObject(context.Context, *UpdateObjectRequest) (*ObjectResponse, error)
	DeleteObjectField(context.Context, *DeleteObjectsFieldsRequest) (*ObjectResponse, error)
	// Batch/Unique
	CreateObjects(context.Context, *CreateObjectsRequest) (*ObjectsResponse, error)
	GetObjects(context.Context, *GetObjectsRequest) (*ObjectsResponse, error)
	UpdateObjects(context.Context, *UpdateObjectsRequest) (*ObjectsResponse, error)
	CreateObjectsUnique(context.Context, *CreateObjectsUniqueRequest) (*ObjectsResponse, error)
	UpdateObjectsUnique(context.Context, *UpdateObjectsUniqueRequest) (*ObjectsResponse, error)
	// List & Pagination
	ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error)
	// Action/Transfer
	ExecuteAction(context.Context, *ExecuteActionRequest) (*ExecuteActionResponse, error)
	ExecuteActions(context.Context, *ExecuteActionsRequest) (*ExecuteActionResponse, error)
	TransferObjects(context.Context, *TransferObjectsRequest) (*TransferObjectsResponse, error)
	ReceiveObjects(context.Context, *TransferObjectsResponse) (*ReceiveObjectsResponse, error)
	// Streaming/Subscription
	SubscribeToUsersObjects(*Empty, ObjectService_SubscribeToUsersObjectsServer) error
	SubscribeToMyself(*Empty, ObjectService_SubscribeToMyselfServer) error
	SyncWithUsers(*DiffByUsers, ObjectService_SyncWithUsersServer) error
	Sync(ObjectService_SyncServer) error
	// Get object commands
	GetObjectCommands(context.Context, *GetObjectRequest) (*ObjectsResponse, error)
	mustEmbedUnimplementedObjectServiceServer()
}

// UnimplementedObjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedObjectServiceServer struct {
}

func (UnimplementedObjectServiceServer) CreateObject(context.Context, *CreateObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedObjectServiceServer) GetObject(context.Context, *GetObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectServiceServer) UpdateObject(context.Context, *UpdateObjectRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedObjectServiceServer) DeleteObjectField(context.Context, *DeleteObjectsFieldsRequest) (*ObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectField not implemented")
}
func (UnimplementedObjectServiceServer) CreateObjects(context.Context, *CreateObjectsRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjects not implemented")
}
func (UnimplementedObjectServiceServer) GetObjects(context.Context, *GetObjectsRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}
func (UnimplementedObjectServiceServer) UpdateObjects(context.Context, *UpdateObjectsRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjects not implemented")
}
func (UnimplementedObjectServiceServer) CreateObjectsUnique(context.Context, *CreateObjectsUniqueRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectsUnique not implemented")
}
func (UnimplementedObjectServiceServer) UpdateObjectsUnique(context.Context, *UpdateObjectsUniqueRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectsUnique not implemented")
}
func (UnimplementedObjectServiceServer) ListObjects(context.Context, *ListObjectsRequest) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedObjectServiceServer) ExecuteAction(context.Context, *ExecuteActionRequest) (*ExecuteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteAction not implemented")
}
func (UnimplementedObjectServiceServer) ExecuteActions(context.Context, *ExecuteActionsRequest) (*ExecuteActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteActions not implemented")
}
func (UnimplementedObjectServiceServer) TransferObjects(context.Context, *TransferObjectsRequest) (*TransferObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferObjects not implemented")
}
func (UnimplementedObjectServiceServer) ReceiveObjects(context.Context, *TransferObjectsResponse) (*ReceiveObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveObjects not implemented")
}
func (UnimplementedObjectServiceServer) SubscribeToUsersObjects(*Empty, ObjectService_SubscribeToUsersObjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToUsersObjects not implemented")
}
func (UnimplementedObjectServiceServer) SubscribeToMyself(*Empty, ObjectService_SubscribeToMyselfServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToMyself not implemented")
}
func (UnimplementedObjectServiceServer) SyncWithUsers(*DiffByUsers, ObjectService_SyncWithUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncWithUsers not implemented")
}
func (UnimplementedObjectServiceServer) Sync(ObjectService_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectCommands(context.Context, *GetObjectRequest) (*ObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectCommands not implemented")
}
func (UnimplementedObjectServiceServer) mustEmbedUnimplementedObjectServiceServer() {}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_CreateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_UpdateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteObjectField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectsFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteObjectField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_DeleteObjectField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteObjectField(ctx, req.(*DeleteObjectsFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CreateObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_CreateObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObjects(ctx, req.(*CreateObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjects(ctx, req.(*GetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_UpdateObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateObjects(ctx, req.(*UpdateObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CreateObjectsUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectsUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObjectsUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_CreateObjectsUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObjectsUnique(ctx, req.(*CreateObjectsUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateObjectsUnique_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectsUniqueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateObjectsUnique(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_UpdateObjectsUnique_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateObjectsUnique(ctx, req.(*UpdateObjectsUniqueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_ListObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).ListObjects(ctx, req.(*ListObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_ExecuteAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).ExecuteAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_ExecuteAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).ExecuteAction(ctx, req.(*ExecuteActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_ExecuteActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).ExecuteActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_ExecuteActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).ExecuteActions(ctx, req.(*ExecuteActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_TransferObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).TransferObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_TransferObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).TransferObjects(ctx, req.(*TransferObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_ReceiveObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferObjectsResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).ReceiveObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_ReceiveObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).ReceiveObjects(ctx, req.(*TransferObjectsResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_SubscribeToUsersObjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).SubscribeToUsersObjects(m, &objectServiceSubscribeToUsersObjectsServer{stream})
}

type ObjectService_SubscribeToUsersObjectsServer interface {
	Send(*SubscriptionResponse) error
	grpc.ServerStream
}

type objectServiceSubscribeToUsersObjectsServer struct {
	grpc.ServerStream
}

func (x *objectServiceSubscribeToUsersObjectsServer) Send(m *SubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_SubscribeToMyself_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).SubscribeToMyself(m, &objectServiceSubscribeToMyselfServer{stream})
}

type ObjectService_SubscribeToMyselfServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type objectServiceSubscribeToMyselfServer struct {
	grpc.ServerStream
}

func (x *objectServiceSubscribeToMyselfServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_SyncWithUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DiffByUsers)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).SyncWithUsers(m, &objectServiceSyncWithUsersServer{stream})
}

type ObjectService_SyncWithUsersServer interface {
	Send(*ObjectActions) error
	grpc.ServerStream
}

type objectServiceSyncWithUsersServer struct {
	grpc.ServerStream
}

func (x *objectServiceSyncWithUsersServer) Send(m *ObjectActions) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectServiceServer).Sync(&objectServiceSyncServer{stream})
}

type ObjectService_SyncServer interface {
	Send(*ObjectActions) error
	Recv() (*ObjectActions, error)
	grpc.ServerStream
}

type objectServiceSyncServer struct {
	grpc.ServerStream
}

func (x *objectServiceSyncServer) Send(m *ObjectActions) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectServiceSyncServer) Recv() (*ObjectActions, error) {
	m := new(ObjectActions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectService_GetObjectCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObjectCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectCommands(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _ObjectService_CreateObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ObjectService_GetObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _ObjectService_UpdateObject_Handler,
		},
		{
			MethodName: "DeleteObjectField",
			Handler:    _ObjectService_DeleteObjectField_Handler,
		},
		{
			MethodName: "CreateObjects",
			Handler:    _ObjectService_CreateObjects_Handler,
		},
		{
			MethodName: "GetObjects",
			Handler:    _ObjectService_GetObjects_Handler,
		},
		{
			MethodName: "UpdateObjects",
			Handler:    _ObjectService_UpdateObjects_Handler,
		},
		{
			MethodName: "CreateObjectsUnique",
			Handler:    _ObjectService_CreateObjectsUnique_Handler,
		},
		{
			MethodName: "UpdateObjectsUnique",
			Handler:    _ObjectService_UpdateObjectsUnique_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _ObjectService_ListObjects_Handler,
		},
		{
			MethodName: "ExecuteAction",
			Handler:    _ObjectService_ExecuteAction_Handler,
		},
		{
			MethodName: "ExecuteActions",
			Handler:    _ObjectService_ExecuteActions_Handler,
		},
		{
			MethodName: "TransferObjects",
			Handler:    _ObjectService_TransferObjects_Handler,
		},
		{
			MethodName: "ReceiveObjects",
			Handler:    _ObjectService_ReceiveObjects_Handler,
		},
		{
			MethodName: "GetObjectCommands",
			Handler:    _ObjectService_GetObjectCommands_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToUsersObjects",
			Handler:       _ObjectService_SubscribeToUsersObjects_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToMyself",
			Handler:       _ObjectService_SubscribeToMyself_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SyncWithUsers",
			Handler:       _ObjectService_SyncWithUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _ObjectService_Sync_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/object/object.proto",
}
