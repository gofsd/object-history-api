syntax = "proto3";

package command;


option go_package = "cmd/proto";
option java_multiple_files = true;
option java_package = "cmd";
option java_outer_classname = "Command";
option objc_class_prefix = "CMD";

// ---------------- ENUMS ----------------
enum ExecutionStatus {
  UNKNOWN = 0;
  PENDING = 1;
  RUNNING = 2;
  SUCCESS = 3;
  FAILED = 4;
  CANCELLED = 5;
  CANCELLED_BY_TIMEOUT = 6;
  NOT_PERMITTED = 7;
  EXECUTORS_NOT_FOUND = 8;
}

enum UserRole {
  VIEWER = 0;
  EXECUTOR = 1;
  ADMIN = 2;
}

// ------------- CORE MESSAGES -------------
message Group {
  int64 group_id = 1;
  string name = 2;
  string description = 3;
}

message GroupRequest {
  int64 group_id = 1;
}

message UserGroupRequest {
  int64 user_id = 1;
  int64 group_id = 2;
  UserRole role = 3;
}

// ------------- COMMAND TEMPLATES -------------
message ParameterField {
  string name = 1;
  string label = 2;
  string type = 3;
  string default_value = 4;
  string description = 5;
  repeated string options = 6;
  bool required = 7;
  bool multiline = 8;
}

message CommandTemplate {
  int64 command_template_id = 1;
  int64 group_id = 2;
  string command = 3;
  repeated ParameterField fields = 4;
  repeated string sensitive_keys = 5;
  repeated string tags = 6;
  string description = 7;
}

message AddCommandTemplateRequest {
  int64 group_id = 1;
  string command = 2;
  repeated ParameterField fields = 3;
  repeated string sensitive_keys = 4;
  repeated string tags = 5;
  string description = 6;
}

message DeleteCommandTemplateRequest {
  int64 command_template_id = 1;
}

// ------------- COMMAND EXECUTION -------------
message ExecuteRequest {
  int64 command_template_id = 1;
  map<string, string> override_parameters = 2;
  int64 user_id = 3;
}

message ExecuteResponse {
  int64 execution_id = 1;
  ExecutionStatus queue_status = 2;
}

message CancelRequest {
  int64 execution_id = 1;
  int64 user_id = 2;
}

message CancelResponse {
  bool success = 1;
}

message RetryRequest {
  int64 execution_id = 1;
  int64 user_id = 2;
}

message DryRunResult {
  string rendered_command = 1;
  string message = 2;
}

// ------------- LOG STREAMING -------------
message SubscribeRequest {
  int64 user_id = 1;
  repeated int64 execution_ids = 2;
  repeated int64 group_ids = 3;
}

message CommandLog {
  int64 execution_id = 1;
  int64 command_template_id = 2;
  int64 user_id = 3;
  string output = 4;
  ExecutionStatus status = 5;
  int64 timestamp = 6;
  map<string, string> effective_parameters = 7;
  string result_code = 8;
}

// ------------- STATUS UPDATE & EVENT SUBSCRIPTION -------------
message UpdateExecutionStatusRequest {
  int64 execution_id = 1;
  ExecutionStatus status = 2;
  string result_code = 3;
}

message UpdateExecutionStatusResponse {
  bool success = 1;
}

message SubscribeCommandEventsRequest {
  int64 user_id = 1;
  repeated int64 group_ids = 2;
}

message CommandEvent {
  int64 execution_id = 1;
  int64 command_template_id = 2;
  int64 user_id = 3;
  string command = 4;
  map<string, string> effective_parameters = 5;
  int64 timestamp = 6;
}

// ------------- SERVICE -------------
service CommandService {
  // Group management
  rpc CreateGroup(Group) returns (Group);
  rpc DeleteGroup(GroupRequest) returns (Group);
  rpc AddUserToGroup(UserGroupRequest) returns (UserGroupRequest);
  rpc RemoveUserFromGroup(UserGroupRequest) returns (UserGroupRequest);

  // Template management
  rpc AddCommandTemplate(AddCommandTemplateRequest) returns (CommandTemplate);
  rpc DeleteCommandTemplate(DeleteCommandTemplateRequest) returns (CommandTemplate);

  // Execution
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
  rpc Cancel(CancelRequest) returns (CancelResponse);
  rpc Retry(RetryRequest) returns (ExecuteResponse);
  rpc DryRun(ExecuteRequest) returns (DryRunResult);

  // Update execution status
  rpc UpdateExecutionStatus(UpdateExecutionStatusRequest) returns (UpdateExecutionStatusResponse);

  // Streaming logs
  rpc SubscribeLogs(SubscribeRequest) returns (stream CommandLog);

  // Event listener for executors
  rpc SubscribeCommandEvents(SubscribeCommandEventsRequest) returns (stream CommandEvent);
}
