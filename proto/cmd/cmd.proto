syntax = "proto3";

package cmd;

option go_package = "cmd/proto";
option java_multiple_files = true;
option java_package = "cmd";
option java_outer_classname = "Cmd";
option objc_class_prefix = "CMD";



// ---------------- ENUMS ----------------
// ExecutionStatus represents the state of a command execution.
enum ExecutionStatus {
  EXECUTION_STATUS_UNKNOWN = 0;
  EXECUTION_STATUS_PENDING = 1;
  EXECUTION_STATUS_RUNNING = 2;
  EXECUTION_STATUS_SUCCESS = 3;
  EXECUTION_STATUS_FAILED = 4;
  EXECUTION_STATUS_CANCELLED = 5;
  EXECUTION_STATUS_CANCELLED_BY_TIMEOUT = 6;
  EXECUTION_STATUS_NOT_PERMITTED = 7;
  EXECUTION_STATUS_EXECUTORS_NOT_FOUND = 8;
}

// UserRole represents the role of a user in a group.
enum UserRole {
  USER_ROLE_VIEWER = 0;
  USER_ROLE_EXECUTOR = 1;
  USER_ROLE_ADMIN = 2;
}

// ------------- CORE MESSAGES -------------

// Group represents a group of users.
message Group {
  uint64 group_id = 1;
  string name = 2;
  string description = 3;
}

// GroupsResponse is a wrapper for a list of groups.
message GroupsResponse {
  repeated Group groups = 1;
}

// GroupRequest is used to request a specific group by ID.
message GroupRequest {
  uint64 group_id = 1;
}

// UserGroupRequest is used to add or remove a user from a group.
message UserGroupRequest {
  uint64 user_id = 1;
  uint64 group_id = 2;
  UserRole role = 3;
}

// ------------- COMMAND TEMPLATES -------------
// ParameterField describes a parameter for a command template.
message ParameterField {
  string name = 1;
  string label = 2;
  string type = 3;
  string default_value = 4;
  string description = 5;
  repeated string options = 6;
  bool required = 7;
  bool multiline = 8;
}

// Command represents a command template.
message Command {
  uint64 id = 1;
  string name = 2;
  string description = 3;
  repeated ParameterField fields = 4;
}

// AddCommandRequest is used to add a new command template.
message AddCommandRequest {
  string name = 1;
  string description = 2;
  repeated ParameterField fields = 3;

}

// CommandsResponse is a wrapper for a list of commands.
message CommandsResponse {
  repeated Command commands = 1;
}

// CommandRequest is used to get, delete a command template.
message CommandRequest {
  uint64 id = 1;
}

// ------------- COMMAND EXECUTION -------------
// ExecuteRequest is used to execute a command.
message ExecuteRequest {
  uint64 command_id = 1;
  map<string, string> override_parameters = 2;
}

// ExecuteResponse contains the result of a command execution request.
message ExecuteResponse {
  uint64 execution_id = 1;
  ExecutionStatus queue_status = 2;
}

// CancelRequest is used to cancel a command execution.
message CancelRequest {
  uint64 execution_id = 1;
}

// CancelResponse indicates if a cancel operation was successful.
message CancelResponse {
  bool success = 1;
}

// RetryRequest is used to retry a command execution.
message RetryRequest {
  uint64 execution_id = 1;
}

// DryRunResult contains the result of a dry run.
message DryRunResult {
  uint64 command_id = 1;
}

// ------------- LOG STREAMING -------------
// SubscribeRequest is used to subscribe to logs.
message SubscribeRequest {
  uint64 page = 1; // Page number for pagination
  uint64 page_size = 2; // Number of logs per page
}

// CommandLog represents a log entry for a command execution.
message CommandLog {
  uint64 execution_id = 1;
  string output = 2;
  uint64 timestamp = 3;
  ExecutionStatus result_code = 4;
}

// ------------- STATUS UPDATE & EVENT SUBSCRIPTION -------------
// UpdateExecutionStatusRequest is used to update the status of a command execution.
message UpdateExecutionStatusRequest {
  uint64 execution_id = 1;
  ExecutionStatus status = 2;
}

// UpdateExecutionStatusResponse indicates if the update was successful.
message UpdateExecutionStatusResponse {
  bool success = 1;
}

// SubscribeCommandEventsRequest is used to subscribe to command events.
message SubscribeCommandEventsRequest {}

// CommandEvent represents an event related to a command execution.
message CommandEvent {
  uint64 execution_id = 1;
  map<string, string> effective_parameters = 2;
  uint64 timestamp = 3;
}

// Object represents a generic object with fields.
message Object {
  uint64 id = 1;
  map<string, string> fields = 2;
}

// UserGroupResponse is the response for user-group operations.
message UserGroupResponse {
  uint64 user_id = 1;
  uint64 group_id = 2;
  UserRole role = 3;
  string message = 4;
}

// Request to add a contact.
message Contact {
  uint64 id = 1;    // The ID of the user to be added as a contact.
  string email = 2;  // The email address of the user to be added as a contact.
}

// Empty is an empty message for RPCs that require no parameters.
message Empty {}
// ------------- SERVICE -------------

// CommandService provides all command and group management operations.
service CommandService {
  // Group management
  rpc ListGroups(Empty) returns (GroupsResponse);
  rpc AddGroup(Group) returns (Group);
  rpc DeleteGroup(GroupRequest) returns (Group);
  rpc AddUserToGroup(UserGroupRequest) returns (UserGroupResponse);
  rpc RemoveUserFromGroup(UserGroupRequest) returns (UserGroupResponse);

  // Template management
  rpc ListCommands(CommandRequest) returns (CommandsResponse);
  rpc AddCommand(AddCommandRequest) returns (Command);
  rpc DeleteCommand(CommandRequest) returns (Command);
  rpc AddCommandToGroup(UserGroupRequest) returns (UserGroupResponse);
  rpc DeleteCommandFromGroup(UserGroupRequest) returns (UserGroupResponse);

  // Execution
  rpc ListExecutions(Empty) returns (stream CommandLog);
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
  rpc Cancel(CancelRequest) returns (CancelResponse);
  rpc Retry(RetryRequest) returns (ExecuteResponse);
  rpc DryRun(ExecuteRequest) returns (DryRunResult);

  // Update execution status
  rpc UpdateExecutionStatus(UpdateExecutionStatusRequest) returns (UpdateExecutionStatusResponse);

  // Streaming logs
  rpc SubscribeLogs(stream SubscribeRequest) returns (stream CommandLog);

  // Event listener for executors
  rpc SubscribeCommandEvents(stream CommandLog) returns (stream CommandEvent);

    // Add a contact for a user.
  rpc AddMutualContact(Contact) returns (Contact);
  rpc RemoveMutualContact(Contact) returns (Contact);
  rpc ShowMyContact(Empty) returns (Contact);

}
