syntax = "proto3";

package cmd;

option go_package = "cmd/proto";
option java_multiple_files = true;
option java_package = "cmd";
option java_outer_classname = "Cmd";
option objc_class_prefix = "CMD";



// ---------------- ENUMS ----------------
enum ExecutionStatus {
  UNKNOWN = 0;
  PENDING = 1;
  RUNNING = 2;
  SUCCESS = 3;
  FAILED = 4;
  CANCELLED = 5;
  CANCELLED_BY_TIMEOUT = 6;
  NOT_PERMITTED = 7;
  EXECUTORS_NOT_FOUND = 8;
}

enum UserRole {
  VIEWER = 0;
  EXECUTOR = 1;
  ADMIN = 2;
}

// ------------- CORE MESSAGES -------------

message Group {
  uint64 group_id = 1;
  string name = 2;
  string description = 3;
}

message GroupsResponse {
  repeated Group groups = 1;
}

message GroupRequest {
  uint64 group_id = 1;
}

message UserGroupRequest {
  uint64 user_id = 1;
  uint64 group_id = 2;
  UserRole role = 3;
}

// ------------- COMMAND TEMPLATES -------------
message ParameterField {
  string name = 1;
  string label = 2;
  string type = 3;
  string default_value = 4;
  string description = 5;
  repeated string options = 6;
  bool required = 7;
  bool multiline = 8;
}

message Command {
  uint64 id = 1;
  repeated ParameterField fields = 2;
}

message AddCommandRequest {
  repeated ParameterField fields = 1;
}

message CommandsResponse {
  repeated Command commands = 1;
}

message DeleteCommandRequest {
  uint64 id = 1;
}

// ------------- COMMAND EXECUTION -------------
message ExecuteRequest {
  uint64 command_id = 1;
  map<string, string> override_parameters = 2;
}

message ExecuteResponse {
  uint64 execution_id = 1;
  ExecutionStatus queue_status = 2;
}

message CancelRequest {
  uint64 execution_id = 1;
}

message CancelResponse {
  bool success = 1;
}

message RetryRequest {
  uint64 execution_id = 1;
}

message DryRunResult {
  uint64 command_id = 1;
}

// ------------- LOG STREAMING -------------
message SubscribeRequest {}

message CommandLog {
  uint64 execution_id = 1;
  uint64 command_id = 2;
  string output = 3;
  ExecutionStatus status = 4;
  uint64 timestamp = 5;
  map<string, string> effective_parameters = 6;
  string result_code = 7;
}

// ------------- STATUS UPDATE & EVENT SUBSCRIPTION -------------
message UpdateExecutionStatusRequest {
  uint64 execution_id = 1;
  ExecutionStatus status = 2;
  string result_code = 3;
  string output = 4;
}

message UpdateExecutionStatusResponse {
  bool success = 1;
}

message SubscribeCommandEventsRequest {}

message CommandEvent {
  uint64 execution_id = 1;
  uint64 command_id = 2;
  map<string, string> effective_parameters = 3;
  uint64 timestamp = 4;
}

message Object {
  uint64 id = 1;
  map<string, string> fields = 2;
}

message UserGroupResponse {
  uint64 user_id = 1;
  uint64 group_id = 2;
  UserRole role = 3;
  string message = 4;
}
message Empty{}
// ------------- SERVICE -------------

service CommandService {
  // Group management
  rpc ListGroups(Empty) returns (GroupsResponse);
  rpc AddGroup(Group) returns (Group);
  rpc DeleteGroup(GroupRequest) returns (Group);
  rpc AddUserToGroup(UserGroupRequest) returns (UserGroupResponse);
  rpc RemoveUserFromGroup(UserGroupRequest) returns (UserGroupResponse);

  // Template management
  rpc ListCommands(Empty) returns (CommandsResponse);
  rpc AddCommand(AddCommandRequest) returns (Command);
  rpc DeleteCommand(DeleteCommandRequest) returns (Command);
  rpc AddCommandToGroup(UserGroupRequest) returns (UserGroupResponse);
  rpc DeleteCommandFromGroup(UserGroupRequest) returns (UserGroupResponse);
  // Execution
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
  rpc Cancel(CancelRequest) returns (CancelResponse);
  rpc Retry(RetryRequest) returns (ExecuteResponse);
  rpc DryRun(ExecuteRequest) returns (DryRunResult);

  // Update execution status
  rpc UpdateExecutionStatus(UpdateExecutionStatusRequest) returns (UpdateExecutionStatusResponse);

  // Streaming logs
  rpc SubscribeLogs(SubscribeRequest) returns (stream CommandLog);

  // Event listener for executors
  rpc SubscribeCommandEvents(SubscribeCommandEventsRequest) returns (stream CommandEvent);
}
